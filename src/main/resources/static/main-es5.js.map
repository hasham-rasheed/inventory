{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/components/app.component.ts","webpack:///src/app/components/app.component.html","webpack:///src/app/components/inventory/inventory.component.ts","webpack:///src/app/components/inventory/inventory.component.html","webpack:///src/app/service/inventory.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppModule","declarations","imports","providers","bootstrap","AppComponent","title","selector","templateUrl","styleUrls","InventoryComponent","inventoryService","_snackBar","displayedColumns","error","itemsSubscription","getAllItems","subscribe","items","triggerSnackBar","message","action","open","duration","unsubscribe","InventoryService","http","inventoryURL","endpoint","get","providedIn","environment","production","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './components/app.component';\nimport { InventoryComponent } from './components/inventory/inventory.component';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatTableModule } from '@angular/material/table';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InventoryComponent,\n    InventoryComponent\n  ],\n  imports: [\n    BrowserModule,\n    NoopAnimationsModule,\n    MatTableModule,\n    HttpClientModule,\n    MatSnackBarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","<app-inventory></app-inventory>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { InventoryService } from '../../service/inventory.service';\nimport { Subscription } from 'rxjs';\nimport { Item } from '../../model/item';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-inventory',\n  templateUrl: './inventory.component.html',\n  styleUrls: ['./inventory.component.css']\n})\nexport class InventoryComponent implements OnInit, OnDestroy {\n  items: Item[];\n  itemsSubscription: Subscription;\n  displayedColumns: string[] = ['sku', 'name', 'count'];\n  error: boolean = false;\n\n  constructor(private inventoryService: InventoryService, private _snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.itemsSubscription = this.inventoryService.getAllItems().subscribe(items => {\n      this.items = items;\n      this.error = false;\n    }, error => {\n      this.error = true;\n      this.triggerSnackBar('Communication error occurred!', 'Close');\n    });\n  }\n\n  triggerSnackBar(message: string, action: string): void {\n    this._snackBar.open(message, action, {\n      duration: 10000,\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.itemsSubscription) {\n      this.itemsSubscription.unsubscribe();\n    }\n  }\n\n\n}\n","<div *ngIf=\"error\" class=\"container\">\n  <h1>Please make sure server is up and running...</h1>\n</div>\n<div *ngIf=\"!error\" class=\"container\">\n  <h1>Inventory Items</h1>\n<table mat-table [dataSource]=\"items\" class=\"mat-elevation-z8\">\n\n  <ng-container *ngFor=\"let col of displayedColumns\" matColumnDef=\"{{col}}\">\n    <th mat-header-cell *matHeaderCellDef class=\"column\">{{ col | uppercase}}</th>\n    <td mat-cell *matCellDef=\"let item\" class=\"column\"> {{item[col]}} </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>\n</div>\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  private readonly inventoryURL = environment.endpoint + 'inventory/all';\n  constructor(private http: HttpClient) { }\n\n  getAllItems(): Observable<any>{\n    return this.http.get(this.inventoryURL);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  endpoint: 'http://localhost:8080/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}